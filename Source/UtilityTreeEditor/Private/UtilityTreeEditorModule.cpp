// Copyright 2015-2017 Piperift. All Rights Reserved.

#include "UtilityTreeEditorModule.h"

#include "Kismet2/KismetEditorUtilities.h"
#include "AssetToolsModule.h"

#include "UtilityTreeEditorStyle.h"

//#include "Asset/AssetTypeAction_UtilityTree.h"

//#include "QuestGraph/UtilityTreeEditor.h"

//#include "ContentBrowserExtensions/ContentBrowserExtensions.h"


DEFINE_LOG_CATEGORY(LogUtilityEd)
 
#define LOCTEXT_NAMESPACE "UtilityTreeEditor"
 
void FUtilityTreeEditorModule::StartupModule()
{
    UE_LOG(LogUtilityEd, Warning, TEXT("UtilityTreeEditor: Log Started"));

	//Initialize Editor Style
	FUtilityTreeEditorStyle::Initialize();

    RegisterPropertyTypeCustomizations();
    PrepareAutoGeneratedDefaultEvents();

    // Register asset types
    IAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>("AssetTools").Get();
    //RegisterAssetTypeAction(AssetTools, MakeShareable(new FAssetTypeAction_UtilityTree));

	// Integrate UtilityTree actions into existing editor context menus
	if (!IsRunningCommandlet())
	{
		//FUtilityTreeCBExtensions::InstallHooks();
	}
}
 
void FUtilityTreeEditorModule::ShutdownModule()
{
    UE_LOG(LogUtilityEd, Warning, TEXT("UtilityTreeEditor: Log Ended"));

    // Cleanup all information for auto generated default event nodes by this module
    FKismetEditorUtilities::UnregisterAutoBlueprintNodeCreation(this);

	if (UObjectInitialized())
	{
		//FUtilityTreeCBExtensions::RemoveHooks();
	}

	//Shutdown Editor Style
	FUtilityTreeEditorStyle::Shutdown();
}

void FUtilityTreeEditorModule::RegisterPropertyTypeCustomizations()
{
}

void FUtilityTreeEditorModule::PrepareAutoGeneratedDefaultEvents()
{
    //RegisterDefaultEvent(Class, FunctionEvent);
}

void FUtilityTreeEditorModule::RegisterComponentVisualizer(FName ComponentClassName, TSharedPtr<FComponentVisualizer> Visualizer)
{
    if (GUnrealEd != NULL)
    {
        GUnrealEd->RegisterComponentVisualizer(ComponentClassName, Visualizer);
    }

    if (Visualizer.IsValid())
    {
        Visualizer->OnRegister();
    }
}

void FUtilityTreeEditorModule::RegisterCustomPropertyTypeLayout(FName PropertyTypeName, FOnGetPropertyTypeCustomizationInstance PropertyTypeLayoutDelegate)
{
    check(PropertyTypeName != NAME_None);

    static FName PropertyEditor("PropertyEditor");
    FPropertyEditorModule& PropertyModule = FModuleManager::GetModuleChecked<FPropertyEditorModule>(PropertyEditor);
    PropertyModule.RegisterCustomPropertyTypeLayout(PropertyTypeName, PropertyTypeLayoutDelegate);
}

template<class T>
void FUtilityTreeEditorModule::RegisterCustomPinFactory()
{
    TSharedPtr<T> PinFactory = MakeShareable(new T());
    FEdGraphUtilities::RegisterVisualPinFactory(PinFactory);
    CreatedPinFactories.Add(PinFactory);
}

TSharedRef<IUtilityTreeEditor> FUtilityTreeEditorModule::CreateUtilityTreeEditor(const EToolkitMode::Type Mode, const TSharedPtr< IToolkitHost >& InitToolkitHost, UUtilityTree* UtilityTree)
{
	/*if (!QGClassCache.IsValid())
	{
		QGClassCache = MakeShareable(new FGraphNodeClassHelper(UQGNode::StaticClass()));
		FGraphNodeClassHelper::AddObservedBlueprintClasses(UQGNode_Logic::StaticClass());
		QGClassCache->UpdateAvailableBlueprintClasses();
	}*/

	TSharedRef<FUtilityTreeEditor> NewQuestGroupEditor(new FUtilityTreeEditor());
	NewQuestGroupEditor->InitUtilityTreeEditor(Mode, InitToolkitHost, UtilityTree);
	return NewQuestGroupEditor;
}

#undef LOCTEXT_NAMESPACE

IMPLEMENT_GAME_MODULE(FUtilityTreeEditorModule, UtilityTreeEditor);