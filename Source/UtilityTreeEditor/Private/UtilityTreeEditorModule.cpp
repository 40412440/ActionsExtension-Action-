// Copyright 2015-2018 Piperift. All Rights Reserved.

#include "UtilityTreeEditorModule.h"
#include "UtilityTree/UtilityTreeGraphFactory.h"

#include "Kismet2/KismetEditorUtilities.h"
#include "AssetToolsModule.h"

#include "UtilityTreeEditorStyle.h"

#include "Asset/AssetTypeAction_UtilityTreeBlueprint.h"

//#include "QuestGraph/UtilityTreeEditor.h"

//#include "ContentBrowserExtensions/ContentBrowserExtensions.h"


DEFINE_LOG_CATEGORY(LogUtilityEd)
 
#define LOCTEXT_NAMESPACE "UtilityTreeEditor"
 
void FUtilityTreeEditorModule::StartupModule()
{
    UE_LOG(LogUtilityEd, Warning, TEXT("UtilityTreeEditor: Log Started"));

	//Initialize Editor Style
	FUtilityTreeEditorStyle::Initialize();

    RegisterPropertyTypeCustomizations();
    PrepareAutoGeneratedDefaultEvents();

	// Register widget blueprint compiler we do this no matter what.
	IKismetCompilerInterface& KismetCompilerModule = FModuleManager::LoadModuleChecked<IKismetCompilerInterface>("KismetCompiler");
	KismetCompilerModule.GetCompilers().Add(this);

    // Register asset types
    IAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>("AssetTools").Get();
    RegisterAssetTypeAction(AssetTools, MakeShareable(new FAssetTypeAction_UtilityTreeBlueprint));


	AIGraphNodeFactory = MakeShareable(new FAIGraphNodeFactory());
	FEdGraphUtilities::RegisterVisualNodeFactory(AIGraphNodeFactory);

	AIGraphPinFactory = MakeShareable(new FAIGraphPinFactory());
	FEdGraphUtilities::RegisterVisualPinFactory(AIGraphPinFactory);

	AIGraphPinConnectionFactory = MakeShareable(new FAIGraphPinConnectionFactory());
	FEdGraphUtilities::RegisterVisualPinConnectionFactory(AIGraphPinConnectionFactory);


	// Integrate UtilityTree actions into existing editor context menus
	if (!IsRunningCommandlet())
	{
		//FUtilityTreeCBExtensions::InstallHooks();
	}
}
 
void FUtilityTreeEditorModule::ShutdownModule()
{
    UE_LOG(LogUtilityEd, Warning, TEXT("UtilityTreeEditor: Log Ended"));

	// Unregister all the asset types
	if (FModuleManager::Get().IsModuleLoaded("AssetTools"))
	{
		IAssetTools& AssetTools = FModuleManager::GetModuleChecked<FAssetToolsModule>("AssetTools").Get();
		for (int32 Index = 0; Index < CreatedAssetTypeActions.Num(); ++Index)
		{
			AssetTools.UnregisterAssetTypeActions(CreatedAssetTypeActions[Index].ToSharedRef());
		}
	}
	CreatedAssetTypeActions.Empty();

	IKismetCompilerInterface& KismetCompilerModule = FModuleManager::LoadModuleChecked<IKismetCompilerInterface>("KismetCompiler");
	KismetCompilerModule.GetCompilers().Remove(this);

    // Cleanup all information for auto generated default event nodes by this module
    FKismetEditorUtilities::UnregisterAutoBlueprintNodeCreation(this);

	if (UObjectInitialized())
	{
		//FUtilityTreeCBExtensions::RemoveHooks();
	}

	//Shutdown Editor Style
	FUtilityTreeEditorStyle::Shutdown();
}

void FUtilityTreeEditorModule::RegisterPropertyTypeCustomizations()
{
}

void FUtilityTreeEditorModule::PrepareAutoGeneratedDefaultEvents()
{
    //RegisterDefaultEvent(Class, FunctionEvent);
}

void FUtilityTreeEditorModule::RegisterComponentVisualizer(FName ComponentClassName, TSharedPtr<FComponentVisualizer> Visualizer)
{
    if (GUnrealEd != NULL)
    {
        GUnrealEd->RegisterComponentVisualizer(ComponentClassName, Visualizer);
    }

    if (Visualizer.IsValid())
    {
        Visualizer->OnRegister();
    }
}

void FUtilityTreeEditorModule::RegisterCustomPropertyTypeLayout(FName PropertyTypeName, FOnGetPropertyTypeCustomizationInstance PropertyTypeLayoutDelegate)
{
    check(PropertyTypeName != NAME_None);

    static FName PropertyEditor("PropertyEditor");
    FPropertyEditorModule& PropertyModule = FModuleManager::GetModuleChecked<FPropertyEditorModule>(PropertyEditor);
    PropertyModule.RegisterCustomPropertyTypeLayout(PropertyTypeName, PropertyTypeLayoutDelegate);
}

template<class T>
void FUtilityTreeEditorModule::RegisterCustomPinFactory()
{
    TSharedPtr<T> PinFactory = MakeShareable(new T());
    FEdGraphUtilities::RegisterVisualPinFactory(PinFactory);
    CreatedPinFactories.Add(PinFactory);
}

#undef LOCTEXT_NAMESPACE

IMPLEMENT_MODULE(FUtilityTreeEditorModule, UtilityTreeEditor);